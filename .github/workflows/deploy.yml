name: Deploy Laravel to Digital Ocean

on:
  push:
    branches: [main, master]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: password
          MYSQL_DATABASE: testing
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: "8.3"
          extensions: mbstring, xml, ctype, iconv, intl, pdo_mysql, dom, filter, gd, iconv, json, mbstring, pdo, bcmath
          coverage: none

      - name: Copy environment file
        run: cp .env.example .env

      - name: Install Composer dependencies
        run: composer install --no-progress --prefer-dist --optimize-autoloader --no-dev

      - name: Generate application key
        run: php artisan key:generate

      - name: Set testing database
        run: |
          sed -i 's/DB_CONNECTION=mysql/DB_CONNECTION=mysql/g' .env
          sed -i 's/DB_HOST=127.0.0.1/DB_HOST=127.0.0.1/g' .env
          sed -i 's/DB_PORT=3306/DB_PORT=3306/g' .env
          sed -i 's/DB_DATABASE=laravel/DB_DATABASE=testing/g' .env
          sed -i 's/DB_USERNAME=root/DB_USERNAME=root/g' .env
          sed -i 's/DB_PASSWORD=/DB_PASSWORD=password/g' .env

      - name: Run database migrations
        run: php artisan migrate --force

      - name: Run tests
        run: php artisan test

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"

      - name: Install Node dependencies
        run: npm ci

      - name: Build assets
        run: npm run build

      - name: Deploy to server
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.DROPLET_HOST }}
          username: ${{ secrets.DROPLET_USER }}
          key: ${{ secrets.DROPLET_SSH_KEY }}
          script_stop: true
          script: |
            set -e

            # Configuration
            DEPLOY_PATH="${{ secrets.DROPLET_PATH }}"
            REPO_URL="${{ github.server_url }}/${{ github.repository }}.git"
            RELEASE_NAME="release_$(date +%Y%m%d_%H%M%S)"

            # Create deployment structure
            mkdir -p $DEPLOY_PATH/{releases,shared,shared/storage}

            # Clone latest code
            echo "üîÑ Cloning latest code..."
            git clone --depth 1 --branch ${{ github.ref_name }} $REPO_URL $DEPLOY_PATH/releases/$RELEASE_NAME
            cd $DEPLOY_PATH/releases/$RELEASE_NAME

            # Copy built assets from previous step
            # (In real deployment, you'd sync the built assets)

            # Install dependencies
            echo "üì¶ Installing Composer dependencies..."
            composer install --no-dev --optimize-autoloader --no-interaction

            # Create shared directories if they don't exist
            mkdir -p $DEPLOY_PATH/shared/storage/{app,framework,logs}
            mkdir -p $DEPLOY_PATH/shared/storage/framework/{cache,sessions,views}
            mkdir -p $DEPLOY_PATH/shared/storage/app/public

            # Link shared directories
            echo "üîó Linking shared directories..."
            rm -rf storage
            ln -nfs $DEPLOY_PATH/shared/storage storage

            # Copy environment file if it doesn't exist in shared
            if [ ! -f $DEPLOY_PATH/shared/.env ]; then
                cp .env.example $DEPLOY_PATH/shared/.env
                echo "‚ö†Ô∏è  Please update $DEPLOY_PATH/shared/.env with your configuration"
            fi

            # Link environment file
            rm -f .env
            ln -nfs $DEPLOY_PATH/shared/.env .env

            # Set permissions
            chmod -R 775 $DEPLOY_PATH/shared/storage
            chown -R deployer:www-data $DEPLOY_PATH/shared/storage

            # Laravel deployment steps
            echo "üöÄ Running Laravel deployment steps..."
            php artisan config:cache
            php artisan route:cache
            php artisan view:cache
            php artisan migrate --force

            # Storage link
            php artisan storage:link

            # Update current symlink
            echo "üîÑ Updating current release..."
            ln -nfs $DEPLOY_PATH/releases/$RELEASE_NAME $DEPLOY_PATH/current

            # Restart services
            echo "‚ôªÔ∏è  Restarting services..."
            sudo systemctl reload php8.3-fpm
            sudo systemctl reload nginx

            # Cleanup old releases (keep last 5)
            echo "üßπ Cleaning up old releases..."
            cd $DEPLOY_PATH/releases
            ls -t | tail -n +6 | xargs rm -rf

            echo "‚úÖ Deployment completed successfully!"
            echo "üåê Your Laravel app is now live!"

      - name: Health Check
        run: |
          sleep 5
          curl -f http://${{ secrets.DROPLET_HOST }} || exit 1
